on: [push]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        pg_version:
          - 10
          - 11
          - 12
          - 13
          - 14
        target:
          - os: ubuntu-latest
            platform: x86_64-linux
          - os: macos-latest
            platform: x86_64-darwin
    runs-on: ${{ matrix.target.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Nix
        run: |
          sh <(curl -L https://nixos.org/nix/install) --daemon

          mkdir -p ~/.config/nix/
          echo "experimental-features = nix-command flakes" >> ~/.config/nix/nix.conf

          mkdir -p ~/.config/nixpkgs/
          echo "{ allowUnsupportedSystem = true; }" > ~/.config/nixpkgs/config.nix
      - name: Fetch nix store cache
        id: nix-store-cache
        if: ${{ matrix.target.os == 'ubuntu-latest' }} 
        uses: actions/cache@v2
        with:
          path: |
            ~/nix-store-cache
            ~/.config/nix
            ~/.config/nixpkgs
          key: ${{ matrix.target.platform }}-${{ matrix.pg_version }}-nix-store-${{ hashfiles('flake.lock') }}-v0
      - name: Get extension name
        run: |
          export EXTENSION=$(grep 'name = ".*"' Cargo.toml | sed 's/name = "\(.*\)"$/\1/')
          echo "EXTENSION=${EXTENSION}" >> $GITHUB_ENV
      - name: Build extension
        run: |
          . /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh
          export NIXPKGS_ALLOW_UNSUPPORTED_SYSTEM=1

          nix flake show
          nix build \
            ${{ matrix.target.os == 'ubuntu-latest' && '--eval-store local?root=$HOME/nix-store-cache' || '' }} \
            ${{ matrix.target.os == 'ubuntu-latest' && '--store local?root=$HOME/nix-store-cache' || '' }} \
            --option system ${{ matrix.target.platform }} \
            --out-link out-${{ matrix.target.platform }}.${EXTENSION}_${{ matrix.pg_version }}_debug \
            --print-build-logs \
            --verbose \
            -j2 \
            .#${EXTENSION}_${{ matrix.pg_version }}_debug
          
          EXTENSION_OUT_DIR=$(readlink out-${{ matrix.target.platform }}.${EXTENSION}_${{ matrix.pg_version }}_debug)
          mkdir -v -p ${{ matrix.target.platform }}.${EXTENSION}_${{ matrix.pg_version }}_debug
          sudo rsync -v -L -a \
            ${{ matrix.target.os == 'ubuntu-latest' && '$HOME/nix-store-cache' || '' }}$EXTENSION_OUT_DIR/* \
            ${{ matrix.target.platform }}.${EXTENSION}_${{ matrix.pg_version }}_debug

          ${{ matrix.target.os == 'ubuntu-latest' && steps.nix-store-cache.outputs.cache-hit != 'true' && 'nix store optimise --store local?root=$HOME/nix-store-cache' || '' }} \
      - uses: actions/upload-artifact@v2
        name: Upload artifact
        with:
          name: ${{ matrix.target.platform }}.${{ env.EXTENSION }}_${{ matrix.pg_version }}_debug
          path: ${{ matrix.target.platform }}.${{ env.EXTENSION }}_${{ matrix.pg_version }}_debug
